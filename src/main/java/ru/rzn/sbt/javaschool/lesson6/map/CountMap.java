package ru.rzn.sbt.javaschool.lesson6.map;

import java.util.Map;

/**
 * Контейнер со счётчиком ссылок
 */
public interface CountMap {
    /**
     * Добавляет ссылку на элемент в контейнер. Если ссылка уже содержится в контейнере, увеличивает счётчика ссылок на
     * единицу
     * @param o ссылка на элемент
     * @throws NullPointerException, если аргумент - ссылка на null
     */
    void add(Object o);

    /**
     * Возвращает значение счётчика ссылок на элемент в контейнере
     * @param o ссылка на элемент
     * @return количество ссылок на элемент в контейнере
     * @throws NullPointerException, если аргумент - ссылка на null
     */
    int getCount(Object o);

    /**
     * Уменьшает знчачение счётчика ссылок на элемент на единицу. Если значение счётчика упало до нуля, удаляет ссылку
     * на элемент из контейнера. Метод возвращает значение счётчика ссылок на элемент до удаления.
     * Если ссылка на элемент отсутствует в контейнере, метод ничего не делает
     * @param o элемент
     * @return количество ссылок на элемент(до удаления)
     * @throws NullPointerException, если аргумент - ссылка на null
     */
    int remove(Object o);

    /**
     * Возвращает количество зарегистрированных в контейнере различных ссылок на элементы
     * @return количество зарегистрированных в контейнере различных ссылок на элементы
     */
    int size();

    /**
     * Добавляет все ссылки на элементы из source в контейнер. Если ссылка зарегистрирована в обоих контейнерах, в
     * текущем контейнере значение счётчика ссылок увеличивается на значение соответствующего счётчика ссылок из source
     * @param source контейнер
     * @throws NullPointerException, если аргумент - ссылка на null
     */
    void addAll(CountMap source);

    /**
     * Возвращает java.util.Map, где ключи - зарегистрированные в текущем контейнере ссылки на элементы, значения -
     * счётчики ссылок
     * @return java.util.Map, где ключи - зарегистрированные в текущем контейнере ссылки на элементы, значения -
     * счётчики ссылок
     */
    Map toMap();

    /**
     * Заполняет содержимое destination таким образом, что ключи - зарегистрированные в текущем контейнере ссылки на элементы, значения -
     * счётчики ссылок
     * Тот же контракт что и в методе CountMap{@link #toMap()}, только всю информацию пришет в destination
     * @param destination словарь
     * @throws NullPointerException, если аргумент - ссылка на null
     */
    void toMap(Map destination);
}
